// red_team_exploits.js
module.exports = function runCustomExploit(code) {
  const findings = [];
  // 1. Hardcoded secrets/passwords/API keys
  if (/api[_-]?key|secret|password|token\s*=\s*['"][\w\-]+['"]/i.test(code))
    findings.push("Hardcoded secret, password, or API key detected.");

  // 2. SQL Injection
  if (/(query|execute|run)\s*\(\s*["'].*SELECT.*["']\s*\+\s*\w+/i.test(code))
    findings.push("Possible SQL injection via dynamic/raw query detected.");

  // 3. OS Command Injection
  if (
    /(exec|spawn|system)\s*\((.*user.*|.*input.*|.*req.*|.*body.*)\)/i.test(
      code,
    )
  )
    findings.push("Possible OS command injection from user input detected.");

  // 4. XSS
  if (
    /(innerHTML|document\.write|dangerouslySetInnerHTML)\s*=\s*.*(user|input|req|body)/i.test(
      code,
    )
  )
    findings.push(
      "Potential XSS (Cross-site Scripting) vulnerability detected.",
    );

  // 5. Insecure Deserialization
  if (
    /(eval|Function|setTimeout|setInterval)\s*\(\s*(user|input|req|body)/i.test(
      code,
    )
  )
    findings.push(
      "Potential insecure deserialization or code execution vulnerability detected.",
    );

  // 6. Path Traversal
  if (
    /(fs\.readFile|fs\.writeFile|fs\.createReadStream|fs\.unlink)\s*\(\s*(user|input|req|body)/i.test(
      code,
    )
  )
    findings.push("Potential path traversal vulnerability detected.");

  // 7. CSRF
  if (/<form[^>]*action=[^>]+>/.test(code) && !/csrf/i.test(code))
    findings.push("Form without CSRF protection detected.");

  // 8. Open Redirects
  if (/res\.redirect\((user|input|req|body)\)/i.test(code))
    findings.push("Open redirect from user-controlled input detected.");

  // 9. Unvalidated Redirects/Forwards
  if (
    /(window\.location|location\.href)\s*=\s*(user|input|req|body)/i.test(code)
  )
    findings.push("Unvalidated redirect/forward from user input detected.");

  // 10. Use of 'eval'
  if (/eval\s*\(/.test(code))
    findings.push("Use of 'eval' detected, potential code injection risk.");

  // 11. Weak JWT/Token Verification
  if (/jwt\.verify\s*\(.*("none"|null)/i.test(code))
    findings.push(
      "JWT verification with 'none' or missing algorithm detected.",
    );

  // 12. Insecure CORS Settings
  if (/Access-Control-Allow-Origin\s*[:=]\s*['"]\*['"]/i.test(code))
    findings.push("Insecure CORS setting: allows all origins.");

  // 13. Outdated/Vulnerable Dependencies
  if (/require\s*\(\s*['"]crypto['"]\s*\)/.test(code))
    findings.push(
      "Usage of built-in 'crypto' module, check for outdated implementation.",
    );
  if (/require\s*\(\s*['"]express['"]\s*\)/.test(code))
    findings.push("Check 'express' version for known vulnerabilities.");

  // 14. Insecure HTTP Headers
  if (!/helmet\(\)/.test(code) && !/setHeader\(/.test(code))
    findings.push("Missing HTTP security headers (Helmet or manual headers).");

  // 15. Insecure Cookie Settings
  if (/res\.cookie\(/.test(code) && !/httpOnly\s*:\s*true/.test(code))
    findings.push("Cookie set without HttpOnly flag.");
  if (/res\.cookie\(/.test(code) && !/secure\s*:\s*true/.test(code))
    findings.push("Cookie set without Secure flag.");

  // 16. No Rate Limiting
  if (!/rateLimit/.test(code))
    findings.push("No rate limiting detected, possible DoS risk.");

  // 17. SSRF
  if (/(axios|get|fetch|request)\s*\((user|input|req|body)/i.test(code))
    findings.push("Possible SSRF from user-controlled URL.");

  // 18. Sensitive Data Exposure
  if (/console\.log\((user|input|req|body|password|secret|token)\)/i.test(code))
    findings.push("Logging of sensitive user data detected.");

  // 19. Insecure File Uploads
  if (
    /(multer|upload|formidable)/.test(code) &&
    !/(filetype|mimetype|size)/.test(code)
  )
    findings.push("File upload without type/size validation detected.");

  return findings;
};
