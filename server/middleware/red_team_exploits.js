module.exports = function runCustomExploit(code) {
  const findings = [];

  // 1. Hardcoded secrets/passwords/API keys
  if (
    /api[_-]?key|secret|password|token\s*[=:]\s*['"`][\w\-\+\/=]{8,}['"`]/i.test(
      code,
    )
  )
    findings.push("Hardcoded secret, password, or API key detected.");

  // 2. SQL Injection vulnerabilities
  if (/(query|execute|run)\s*\(\s*['"`].*SELECT.*['"`]\s*\+\s*\w+/i.test(code))
    findings.push("Possible SQL injection via dynamic/raw query detected.");

  if (/\$\{.*\}.*SELECT|INSERT|UPDATE|DELETE/i.test(code))
    findings.push("Possible SQL injection via template literal detected.");

  // 3. OS Command Injection
  if (
    /(exec|spawn|system|eval)\s*\([^)]*(?:user|input|req|body|params|query)[^)]*\)/i.test(
      code,
    )
  )
    findings.push("Possible OS command injection from user input detected.");

  if (
    /(child_process\.exec|shelljs\.exec)\s*\([^)]*\$\{[^}]*(?:req|input|user)[^}]*\}/i.test(
      code,
    )
  )
    findings.push("Command injection via template literal in exec detected.");

  // 4. Cross-Site Scripting (XSS)
  if (
    /(innerHTML|document\.write|dangerouslySetInnerHTML)\s*[=:]\s*[^;]*(?:user|input|req|body|params)/i.test(
      code,
    )
  )
    findings.push(
      "Potential XSS (Cross-site Scripting) vulnerability detected.",
    );

  if (
    /\$\{[^}]*(?:req|input|user)[^}]*\}/.test(code) &&
    /html|script|iframe/i.test(code)
  )
    findings.push(
      "Potential XSS via template literal in HTML context detected.",
    );

  // 5. Code Injection and Insecure Deserialization
  if (
    /(eval|Function|setTimeout|setInterval)\s*\([^)]*(?:user|input|req|body|params)/i.test(
      code,
    )
  )
    findings.push(
      "Potential code injection or insecure deserialization vulnerability detected.",
    );

  if (/JSON\.parse\s*\([^)]*(?:req|input|user)[^)]*\)/.test(code))
    findings.push(
      "Potential JSON injection via user-controlled input detected.",
    );

  // 6. Path Traversal
  if (
    /(fs\.readFile|fs\.writeFile|fs\.createReadStream|fs\.unlink|fs\.access)\s*\([^)]*(?:user|input|req|body|params)/i.test(
      code,
    )
  )
    findings.push("Potential path traversal vulnerability detected.");

  if (/\.\.\/|\.\.\\/.test(code))
    findings.push("Directory traversal patterns detected in file paths.");

  // 7. CSRF Protection Missing
  if (
    /<form[^>]*method\s*=\s*['"`]post['"`][^>]*>/i.test(code) &&
    !/csrf|_token/i.test(code)
  )
    findings.push("Form without CSRF protection detected.");

  if (/app\.post|router\.post/.test(code) && !/csrf|csurf/i.test(code))
    findings.push("POST endpoint without CSRF protection detected.");

  // 8. Open Redirects
  if (/res\.redirect\s*\([^)]*(?:user|input|req|body|params|query)/i.test(code))
    findings.push("Open redirect from user-controlled input detected.");

  if (
    /(window\.location|location\.href)\s*=\s*[^;]*(?:user|input|req|body|params)/i.test(
      code,
    )
  )
    findings.push("Client-side redirect from user input detected.");

  // 9. Dangerous eval usage
  if (/eval\s*\(/.test(code))
    findings.push("Use of 'eval' detected, potential code injection risk.");

  if (/new\s+Function\s*\(/.test(code))
    findings.push(
      "Dynamic function creation detected, potential code injection risk.",
    );

  // 10. JWT Security Issues
  if (/jwt\.verify\s*\([^)]*['"`]none['"`]/i.test(code))
    findings.push(
      "JWT verification with 'none' algorithm detected - critical security issue.",
    );

  if (/jwt\.sign\s*\([^)]*\)/.test(code) && !/expiresIn|exp/.test(code))
    findings.push("JWT token without expiration detected.");

  // 11. Insecure CORS Settings
  if (/Access-Control-Allow-Origin\s*[:=]\s*['"`]\*['"`]/i.test(code))
    findings.push("Insecure CORS setting: allows all origins.");

  if (/cors\(\s*\)/.test(code))
    findings.push(
      "CORS enabled without restrictions - potential security risk.",
    );

  // 12. Crypto and Hashing Issues
  if (/crypto\.createHash\s*\(\s*['"`]md5['"`]/i.test(code))
    findings.push("Weak hashing algorithm (MD5) detected.");

  if (/crypto\.createHash\s*\(\s*['"`]sha1['"`]/i.test(code))
    findings.push("Weak hashing algorithm (SHA1) detected.");

  if (/Math\.random\(\)/.test(code) && /password|token|session|key/i.test(code))
    findings.push(
      "Insecure random number generation for security-sensitive values.",
    );

  // 13. HTTP Security Headers Missing
  if (!/helmet\(\)|setHeader/i.test(code) && /express\(\)|app\s*=/.test(code))
    findings.push("Missing HTTP security headers (consider using Helmet).");

  if (
    /X-Frame-Options|Content-Security-Policy|X-XSS-Protection/.test(code) ===
      false &&
    /express|app\.use/.test(code)
  )
    findings.push("Security headers not explicitly set.");

  // 14. Insecure Cookie Settings
  if (/res\.cookie\s*\([^)]*\)/.test(code)) {
    if (!/httpOnly\s*:\s*true/i.test(code))
      findings.push("Cookie set without HttpOnly flag.");
    if (!/secure\s*:\s*true/i.test(code))
      findings.push("Cookie set without Secure flag.");
    if (!/sameSite/i.test(code))
      findings.push("Cookie set without SameSite attribute.");
  }

  // 15. Rate Limiting Missing
  if (
    /(app\.post|app\.get|router\.post|router\.get)/.test(code) &&
    !/rateLimit|express-rate-limit/i.test(code)
  )
    findings.push("No rate limiting detected, possible DoS vulnerability.");

  // 16. Server-Side Request Forgery (SSRF)
  if (
    /(axios|fetch|request|http\.get|https\.get)\s*\([^)]*(?:user|input|req|body|params|query)/i.test(
      code,
    )
  )
    findings.push("Possible SSRF vulnerability from user-controlled URL.");

  if (
    /url\s*=\s*[^;]*(?:req|input|user)/.test(code) &&
    /(fetch|axios|request)/i.test(code)
  )
    findings.push("HTTP request with user-controlled URL detected.");

  // 17. Sensitive Data Exposure
  if (/console\.log\s*\([^)]*(?:password|secret|token|key|auth)/i.test(code))
    findings.push("Logging of sensitive data detected.");

  if (/res\.send\s*\([^)]*(?:error|stack|trace)/i.test(code))
    findings.push("Error details exposed to client detected.");

  // 18. File Upload Vulnerabilities
  if (/(multer|formidable|busboy)/.test(code)) {
    if (!/(fileFilter|mimetype|filename)/.test(code))
      findings.push("File upload without type validation detected.");
    if (!/limits.*fileSize/.test(code))
      findings.push("File upload without size limits detected.");
  }

  // 19. NoSQL Injection
  if (
    /\$where|\$regex|\$ne|\$gt|\$lt/.test(code) &&
    /req\.body|req\.query|req\.params/.test(code)
  )
    findings.push("Potential NoSQL injection vulnerability detected.");

  // 20. Prototype Pollution
  if (/Object\.assign\s*\([^)]*req\.body/i.test(code))
    findings.push("Potential prototype pollution via Object.assign detected.");

  if (/\.\.\.\s*req\.body|\.\.\.\s*req\.query/.test(code))
    findings.push(
      "Potential prototype pollution via spread operator detected.",
    );

  // 21. Insecure Direct Object References
  if (
    /req\.params\.id/.test(code) &&
    !/authorization|auth|permission|access/i.test(code)
  )
    findings.push(
      "Direct object reference without authorization check detected.",
    );

  // 22. XML External Entity (XXE)
  if (
    /xml2js|libxmljs|xmldom/.test(code) &&
    !/noent.*false|loadExternalDtd.*false/i.test(code)
  )
    findings.push("XML parser without XXE protection detected.");

  // 23. Insecure Randomness
  if (/Math\.random/.test(code) && /session|nonce|csrf|token/i.test(code))
    findings.push("Cryptographically insecure randomness for security tokens.");

  // 24. Buffer Overflow Potential
  if (/Buffer\.alloc\s*\([^)]*req\.|Buffer\.from\s*\([^)]*req\./i.test(code))
    findings.push(
      "Buffer operations with user input - potential overflow risk.",
    );

  // 25. Regex Denial of Service (ReDoS)
  if (/new\s+RegExp\s*\([^)]*req\.|\.match\s*\([^)]*req\./i.test(code))
    findings.push(
      "User-controlled regex pattern - potential ReDoS vulnerability.",
    );

  // 26. Insecure Deserialization Patterns
  if (
    /pickle\.loads|yaml\.load|serialize/.test(code) &&
    !/safe_load|Loader=/.test(code)
  )
    findings.push("Insecure deserialization detected.");

  // 27. Template Injection
  if (
    /(handlebars|mustache|pug|ejs)\.compile/.test(code) &&
    /req\.body|req\.query/.test(code)
  )
    findings.push("Template injection vulnerability detected.");

  // 28. Missing Input Validation
  if (
    /req\.body\.|req\.query\.|req\.params\./.test(code) &&
    !/validate|sanitize|escape|trim/i.test(code)
  )
    findings.push("User input used without validation or sanitization.");

  // 29. Hardcoded Database Credentials
  if (/(mongodb:\/\/|mysql:\/\/|postgres:\/\/|redis:\/\/).*:.*@/.test(code))
    findings.push("Hardcoded database credentials in connection string.");

  // 30. Insecure File Permissions
  if (/fs\.chmod\s*\([^)]*777|fs\.chmod\s*\([^)]*0o777/.test(code))
    findings.push("Overly permissive file permissions (777) detected.");

  return findings;
};
