const { spawn } = require('child_process');
const net = require('net');
const dns = require('dns');
const util = require('util');

class NetworkScannerExploit {
    constructor() {
        this.displayName = 'Network Scanner';
        this.description = 'Network reconnaissance and port scanning capabilities';
        this.severity = 'medium';
        this.category = 'network';
        this.version = '2.0.0';

        // Common ports to scan
        this.commonPorts = [
            21,   // FTP
            22,   // SSH
            23,   // Telnet
            25,   // SMTP
            53,   // DNS
            80,   // HTTP
            110,  // POP3
            111,  // RPC
            135,  // RPC
            139,  // NetBIOS
            143,  // IMAP
            443,  // HTTPS
            445,  // SMB
            993,  // IMAPS
            995,  // POP3S
            1723, // PPTP
            3306, // MySQL
            3389, // RDP
            5432, // PostgreSQL
            5900, // VNC
            6379, // Redis
            8080, // HTTP Alt
            8443, // HTTPS Alt
            9090, // HTTP Alt
            27017 // MongoDB
        ];

        // Service fingerprinting patterns
        this.servicePatterns = {
            21: { name: 'FTP', patterns: [/220.*FTP/i, /220.*FileZilla/i] },
            22: { name: 'SSH', patterns: [/SSH-/i, /OpenSSH/i] },
            23: { name: 'Telnet', patterns: [/login:/i, /Username:/i] },
            25: { name: 'SMTP', patterns: [/220.*SMTP/i, /220.*mail/i] },
            53: { name: 'DNS', patterns: [/DNS/i] },
            80: { name: 'HTTP', patterns: [/HTTP\/1\./i, /Server:/i] },
            110: { name: 'POP3', patterns: [/\+OK.*POP3/i] },
            143: { name: 'IMAP', patterns: [/\* OK.*IMAP/i] },
            443: { name: 'HTTPS', patterns: [/HTTP\/1\./i, /SSL/i] },
            445: { name: 'SMB', patterns: [/SMB/i] },
            3306: { name: 'MySQL', patterns: [/mysql_native_password/i] },
            3389: { name: 'RDP', patterns: [/RDP/i] },
            5432: { name: 'PostgreSQL', patterns: [/PostgreSQL/i] },
            5900: { name: 'VNC', patterns: [/RFB/i] },
            6379: { name: 'Redis', patterns: [/redis_version/i] },
            27017: { name: 'MongoDB', patterns: [/MongoDB/i] }
        };

        // Network scan types
        this.scanTypes = {
            TCP_CONNECT: 'tcp_connect',
            SYN_SCAN: 'syn_scan',
            UDP_SCAN: 'udp_scan',
            SERVICE_DETECTION: 'service_detection',
            OS_DETECTION: 'os_detection'
        };
    }

    async execute(target, options = {}) {
        try {
            const startTime = Date.now();
            const results = {
                target,
                timestamp: new Date(),
                vulnerabilities: [],
                statistics: {
                    totalPorts: 0,
                    openPorts: 0,
                    closedPorts: 0,
                    filteredPorts: 0,
                    servicesDetected: 0
                },
                detailedResults: {}
            };

            console.log(`[NetScan] Starting network scan on: ${target}`);

            // Parse target and extract IP/hostname
            const targetInfo = this.parseTarget(target);

            // Step 1: Host discovery
            const hostDiscovery = await this.performHostDiscovery(targetInfo, options);
            results.detailedResults.hostDiscovery = hostDiscovery;

            if (!hostDiscovery.isAlive) {
                console.log(`[NetScan] Host appears to be down or filtered`);
                return results;
            }

            // Step 2: Port scanning
            const portScanResults = await this.performPortScan(targetInfo, options);
            results.detailedResults.portScan = portScanResults;
            results.statistics.totalPorts = portScanResults.portsScanned;
            results.statistics.openPorts = portScanResults.openPorts.length;
            results.statistics.closedPorts = portScanResults.closedPorts.length;
            results.statistics.filteredPorts = portScanResults.filteredPorts.length;

            // Step 3: Service detection on open ports
            if (portScanResults.openPorts.length > 0) {
                const serviceResults = await this.performServiceDetection(targetInfo, portScanResults.openPorts, options);
                results.detailedResults.serviceDetection = serviceResults;
                results.statistics.servicesDetected = serviceResults.detectedServices.length;

                // Check for vulnerable services
                const vulnServices = this.analyzeVulnerableServices(serviceResults.detectedServices);
                results.vulnerabilities.push(...vulnServices);
            }

            // Step 4: OS detection
            if (options.osDetection && portScanResults.openPorts.length > 0) {
                const osResults = await this.performOSDetection(targetInfo, options);
                results.detailedResults.osDetection = osResults;
            }

            // Step 5: Network vulnerability analysis
            const networkVulns = await this.analyzeNetworkVulnerabilities(targetInfo, portScanResults, options);
            results.vulnerabilities.push(...networkVulns);

            results.executionTime = Date.now() - startTime;
            console.log(`[NetScan] Scan completed. Found ${results.vulnerabilities.length} potential issues in ${results.executionTime}ms`);

            return results;

        } catch (error) {
            console.error('[NetScan] Scan failed:', error.message);
            throw error;
        }
    }

    parseTarget(target) {
        try {
            let hostname, ip;

            // Check if target is a URL
            if (target.includes('://')) {
                const url = new URL(target);
                hostname = url.hostname;
                ip = url.hostname;
            } else {
                // Assume it's a direct IP or hostname
                hostname = target;
                ip = target;
            }

            return {
                original: target,
                hostname,
                ip,
                isIP: this.isValidIP(ip)
            };
        } catch (error) {
            throw new Error(`Invalid target: ${error.message}`);
        }
    }

    isValidIP(ip) {
        const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
        return ipRegex.test(ip);
    }

    async performHostDiscovery(targetInfo, options) {
        const discovery = {
            target: targetInfo.hostname,
            isAlive: false,
            methods: [],
            responseTime: null
        };

        console.log(`[NetScan] Performing host discovery on: ${targetInfo.hostname}`);

        try {
            // Method 1: DNS resolution
            if (!targetInfo.isIP) {
                try {
                    const resolveAsync = util.promisify(dns.resolve4);
                    const addresses = await resolveAsync(targetInfo.hostname);
                    if (addresses && addresses.length > 0) {
                        discovery.methods.push({
                            method: 'DNS_RESOLUTION',
                            success: true,
                            details: `Resolved to: ${addresses.join(', ')}`
                        });
                        targetInfo.resolvedIPs = addresses;
                        discovery.isAlive = true;
                    }
                } catch (error) {
                    discovery.methods.push({
                        method: 'DNS_RESOLUTION',
                        success: false,
                        error: error.message
                    });
                }
            }

            // Method 2: TCP connect to common ports
            const testPorts = [80, 443, 22, 21];
            let tcpSuccess = false;

            for (const port of testPorts) {
                try {
                    const isOpen = await this.checkTCPPort(targetInfo.hostname, port, 5000);
                    if (isOpen) {
                        discovery.methods.push({
                            method: 'TCP_CONNECT',
                            success: true,
                            details: `Port ${port} is open`
                        });
                        discovery.isAlive = true;
                        tcpSuccess = true;
                        break;
                    }
                } catch (error) {
                    // Continue with other ports
                }
            }

            if (!tcpSuccess) {
                discovery.methods.push({
                    method: 'TCP_CONNECT',
                    success: false,
                    details: 'No common ports responding'
                });
            }

            // Method 3: Ping (if available)
            if (options.enablePing) {
                try {
                    const pingResult = await this.performPing(targetInfo.hostname);
                    discovery.methods.push({
                        method: 'ICMP_PING',
                        success: pingResult.success,
                        details: pingResult.details,
                        responseTime: pingResult.responseTime
                    });
                    if (pingResult.success) {
                        discovery.isAlive = true;
                        discovery.responseTime = pingResult.responseTime;
                    }
                } catch (error) {
                    discovery.methods.push({
                        method: 'ICMP_PING',
                        success: false,
                        error: error.message
                    });
                }
            }

        } catch (error) {
            console.error('[NetScan] Host discovery failed:', error.message);
        }

        return discovery;
    }

    async performPortScan(targetInfo, options) {
        const results = {
            target: targetInfo.hostname,
            scanType: this.scanTypes.TCP_CONNECT,
            portsScanned: 0,
            openPorts: [],
            closedPorts: [],
            filteredPorts: [],
            scanTime: null
        };

        console.log(`[NetScan] Performing port scan on: ${targetInfo.hostname}`);

        const startTime = Date.now();
        const portsToScan = options.customPorts || this.commonPorts;
        results.portsScanned = portsToScan.length;

        // TCP Connect scan
        for (const port of portsToScan) {
            try {
                const isOpen = await this.checkTCPPort(targetInfo.hostname, port, options.timeout || 3000);

                if (isOpen) {
                    results.openPorts.push({
                        port,
                        protocol: 'tcp',
                        state: 'open',
                        timestamp: new Date()
                    });
                    console.log(`[NetScan] Found open port: ${port}/tcp`);
                } else {
                    results.closedPorts.push({
                        port,
                        protocol: 'tcp',
                        state: 'closed',
                        timestamp: new Date()
                    });
                }
            } catch (error) {
                results.filteredPorts.push({
                    port,
                    protocol: 'tcp',
                    state: 'filtered',
                    error: error.message,
                    timestamp: new Date()
                });
            }

            // Rate limiting
            if (options.delay) {
                await this.sleep(options.delay);
            }
        }

        results.scanTime = Date.now() - startTime;
        return results;
    }

    async performServiceDetection(targetInfo, openPorts, options) {
        const results = {
            target: targetInfo.hostname,
            detectedServices: [],
            errors: []
        };

        console.log(`[NetScan] Performing service detection on ${openPorts.length} open ports`);

        for (const portInfo of openPorts) {
            try {
                const service = await this.detectService(targetInfo.hostname, portInfo.port, options);
                if (service) {
                    results.detectedServices.push({
                        port: portInfo.port,
                        protocol: portInfo.protocol,
                        service: service.name,
                        version: service.version,
                        banner: service.banner,
                        fingerprint: service.fingerprint,
                        timestamp: new Date()
                    });
                    console.log(`[NetScan] Service detected on port ${portInfo.port}: ${service.name} ${service.version || ''}`);
                }
            } catch (error) {
                results.errors.push({
                    port: portInfo.port,
                    error: error.message,
                    timestamp: new Date()
                });
            }

            if (options.delay) {
                await this.sleep(options.delay);
            }
        }

        return results;
    }

    async performOSDetection(targetInfo, options) {
        const results = {
            target: targetInfo.hostname,
            osFingerprint: null,
            confidence: 0,
            methods: []
        };

        console.log(`[NetScan] Performing OS detection on: ${targetInfo.hostname}`);

        try {
            // Method 1: TTL analysis
            const ttlResult = await this.analyzeTTL(targetInfo.hostname);
            results.methods.push(ttlResult);

            // Method 2: TCP window size analysis
            const windowResult = await this.analyzeTCPWindow(targetInfo.hostname);
            results.methods.push(windowResult);

            // Combine results for OS guess
            results.osFingerprint = this.combineOSFingerprints(results.methods);
            results.confidence = this.calculateOSConfidence(results.methods);

        } catch (error) {
            console.error('[NetScan] OS detection failed:', error.message);
        }

        return results;
    }

    async checkTCPPort(hostname, port, timeout = 3000) {
        return new Promise((resolve, reject) => {
            const socket = new net.Socket();

            const timer = setTimeout(() => {
                socket.destroy();
                resolve(false);
            }, timeout);

            socket.connect(port, hostname, () => {
                clearTimeout(timer);
                socket.destroy();
                resolve(true);
            });

            socket.on('error', () => {
                clearTimeout(timer);
                socket.destroy();
                resolve(false);
            });
        });
    }

    async detectService(hostname, port, options) {
        return new Promise((resolve, reject) => {
            const socket = new net.Socket();
            let banner = '';
            let serviceName = 'unknown';
            let version = '';

            const timeout = setTimeout(() => {
                socket.destroy();
                resolve({
                    name: serviceName,
                    version: version,
                    banner: banner.substring(0, 200),
                    fingerprint: this.generateServiceFingerprint(port, banner)
                });
            }, options.serviceTimeout || 5000);

            socket.connect(port, hostname, () => {
                // Send a probe based on the port
                const probe = this.getServiceProbe(port);
                if (probe) {
                    socket.write(probe);
                }
            });

            socket.on('data', (data) => {
                banner += data.toString();

                // Try to identify service
                const serviceInfo = this.identifyService(port, banner);
                if (serviceInfo) {
                    serviceName = serviceInfo.name;
                    version = serviceInfo.version;
                }

                // If we have enough data, resolve early
                if (banner.length > 100 || serviceName !== 'unknown') {
                    clearTimeout(timeout);
                    socket.destroy();
                    resolve({
                        name: serviceName,
                        version: version,
                        banner: banner.substring(0, 200),
                        fingerprint: this.generateServiceFingerprint(port, banner)
                    });
                }
            });

            socket.on('error', (error) => {
                clearTimeout(timeout);
                socket.destroy();
                reject(error);
            });
        });
    }

    getServiceProbe(port) {
        const probes = {
            21: '', // FTP - just connect
            22: '', // SSH - just connect
            25: 'EHLO test\r\n', // SMTP
            53: '', // DNS
            80: 'GET / HTTP/1.1\r\nHost: localhost\r\n\r\n', // HTTP
            110: '', // POP3
            143: '', // IMAP
            443: 'GET / HTTP/1.1\r\nHost: localhost\r\n\r\n', // HTTPS
            3306: '', // MySQL
            5432: '', // PostgreSQL
            6379: 'INFO\r\n', // Redis
            27017: '' // MongoDB
        };

        return probes[port] || '';
    }

    identifyService(port, banner) {
        const patterns = this.servicePatterns[port];
        if (!patterns) {
            return { name: 'unknown', version: '' };
        }

        for (const pattern of patterns.patterns) {
            if (pattern.test(banner)) {
                // Extract version if possible
                const versionMatch = banner.match(/(\d+\.[\d\.]+)/);
                const version = versionMatch ? versionMatch[1] : '';

                return {
                    name: patterns.name,
                    version: version
                };
            }
        }

        return { name: patterns.name, version: '' };
    }

    generateServiceFingerprint(port, banner) {
        return {
            port,
            bannerHash: this.simpleHash(banner),
            length: banner.length,
            hasVersion: /\d+\.[\d\.]+/.test(banner),
            protocol: port < 1024 ? 'system' : 'user'
        };
    }

    simpleHash(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32-bit integer
        }
        return hash.toString(16);
    }

    async performPing(hostname) {
        return new Promise((resolve) => {
            const startTime = Date.now();
            const ping = spawn('ping', ['-c', '1', '-W', '3000', hostname]);

            let output = '';

            ping.stdout.on('data', (data) => {
                output += data.toString();
            });

            ping.on('close', (code) => {
                const responseTime = Date.now() - startTime;

                if (code === 0) {
                    // Extract actual ping time if available
                    const timeMatch = output.match(/time[=<]\s*(\d+(?:\.\d+)?)\s*ms/);
                    const actualTime = timeMatch ? parseFloat(timeMatch[1]) : responseTime;

                    resolve({
                        success: true,
                        responseTime: actualTime,
                        details: `Ping successful (${actualTime}ms)`
                    });
                } else {
                    resolve({
                        success: false,
                        responseTime: null,
                        details: 'Ping failed or filtered'
                    });
                }
            });

            ping.on('error', () => {
                resolve({
                    success: false,
                    responseTime: null,
                    details: 'Ping command not available'
                });
            });
        });
    }

    async analyzeTTL(hostname) {
        // This is a simplified TTL analysis
        // In practice, you'd need raw socket access for accurate TTL detection
        return {
            method: 'TTL_ANALYSIS',
            result: 'Limited analysis available',
            osHint: 'Unknown (requires raw sockets)'
        };
    }

    async analyzeTCPWindow(hostname) {
        // This is a simplified TCP window analysis
        return {
            method: 'TCP_WINDOW',
            result: 'Limited analysis available',
            osHint: 'Unknown (requires raw sockets)'
        };
    }

    combineOSFingerprints(methods) {
        // Simple OS fingerprinting logic
        const hints = methods.map(m => m.osHint).filter(h => h !== 'Unknown');
        if (hints.length === 0) return 'Unknown';

        // Return most common hint
        const counts = {};
        hints.forEach(hint => counts[hint] = (counts[hint] || 0) + 1);
        return Object.keys(counts).reduce((a, b) => counts[a] > counts[b] ? a : b);
    }

    calculateOSConfidence(methods) {
        const successfulMethods = methods.filter(m => m.osHint !== 'Unknown').length;
        return Math.round((successfulMethods / methods.length) * 100);
    }

    analyzeVulnerableServices(detectedServices) {
        const vulnerabilities = [];

        for (const service of detectedServices) {
            // Check for common vulnerable services
            const vulnChecks = this.getVulnerabilityChecks(service);
            vulnerabilities.push(...vulnChecks);
        }

        return vulnerabilities;
    }

    getVulnerabilityChecks(service) {
        const vulnerabilities = [];

        // Common vulnerable services and versions
        const vulnDatabase = {
            'FTP': {
                versions: ['2.3.4', '2.2.1'],
                description: 'Known vulnerable FTP versions detected'
            },
            'SSH': {
                versions: ['1.0', '1.99'],
                description: 'Outdated SSH protocol version'
            },
            'HTTP': {
                ports: [8080, 8443],
                description: 'Non-standard HTTP ports may indicate development/admin interfaces'
            },
            'Telnet': {
                always: true,
                description: 'Telnet service detected - unencrypted protocol'
            }
        };

        const serviceVuln = vulnDatabase[service.service];
        if (serviceVuln) {
            if (serviceVuln.always ||
                (serviceVuln.versions && serviceVuln.versions.includes(service.version)) ||
                (serviceVuln.ports && serviceVuln.ports.includes(service.port))) {

                vulnerabilities.push({
                    type: 'Vulnerable Service',
                    subtype: `${service.service} Security Issue`,
                    severity: this.getServiceSeverity(service.service),
                    port: service.port,
                    service: service.service,
                    version: service.version,
                    evidence: `${service.service} ${service.version} on port ${service.port}`,
                    impact: serviceVuln.description,
                    recommendation: `Update ${service.service} to latest secure version`,
                    cwe: 'CWE-1104',
                    owasp: 'A06:2021 – Vulnerable and Outdated Components'
                });
            }
        }

        return vulnerabilities;
    }

    getServiceSeverity(serviceName) {
        const severityMap = {
            'Telnet': 'high',
            'FTP': 'medium',
            'SSH': 'low',
            'HTTP': 'low'
        };
        return severityMap[serviceName] || 'info';
    }

    async analyzeNetworkVulnerabilities(targetInfo, portScanResults, options) {
        const vulnerabilities = [];

        // Check for too many open ports
        if (portScanResults.openPorts.length > 10) {
            vulnerabilities.push({
                type: 'Network Security',
                subtype: 'Excessive Open Ports',
                severity: 'medium',
                evidence: `${portScanResults.openPorts.length} open ports detected`,
                impact: 'Large attack surface due to many open services',
                recommendation: 'Close unnecessary ports and services',
                cwe: 'CWE-1250',
                owasp: 'A01:2021 – Broken Access Control'
            });
        }

        // Check for dangerous port combinations
        const openPortNumbers = portScanResults.openPorts.map(p => p.port);
        if (openPortNumbers.includes(22) && openPortNumbers.includes(23)) {
            vulnerabilities.push({
                type: 'Network Security',
                subtype: 'Mixed Secure/Insecure Protocols',
                severity: 'medium',
                evidence: 'Both SSH (22) and Telnet (23) are open',
                impact: 'Risk of credential theft through unencrypted Telnet',
                recommendation: 'Disable Telnet and use SSH exclusively',
                cwe: 'CWE-319',
                owasp: 'A02:2021 – Cryptographic Failures'
            });
        }

        // Check for administrative interfaces
        const adminPorts = [3389, 5900, 8080, 8443, 9090];
        const openAdminPorts = openPortNumbers.filter(port => adminPorts.includes(port));
        if (openAdminPorts.length > 0) {
            vulnerabilities.push({
                type: 'Network Security',
                subtype: 'Administrative Interface Exposure',
                severity: 'high',
                evidence: `Administrative ports detected: ${openAdminPorts.join(', ')}`,
                impact: 'Administrative interfaces exposed to network',
                recommendation: 'Restrict access to administrative interfaces',
                cwe: 'CWE-1188',
                owasp: 'A01:2021 – Broken Access Control'
            });
        }

        return vulnerabilities;
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async getInfo() {
        return {
            name: this.displayName,
            description: this.description,
            version: this.version,
            severity: this.severity,
            category: this.category,
            capabilities: [
                'Host Discovery',
                'TCP Port Scanning',
                'Service Detection',
                'Banner Grabbing',
                'OS Fingerprinting',
                'Vulnerability Analysis'
            ],
            scanTypes: Object.values(this.scanTypes),
            parameters: [
                {
                    name: 'delay',
                    description: 'Delay between port scans in milliseconds',
                    type: 'number',
                    default: 100
                },
                {
                    name: 'timeout',
                    description: 'Connection timeout in milliseconds',
                    type: 'number',
                    default: 3000
                },
                {
                    name: 'serviceTimeout',
                    description: 'Service detection timeout in milliseconds',
                    type: 'number',
                    default: 5000
                },
                {
                    name: 'customPorts',
                    description: 'Custom port list to scan',
                    type: 'array',
                    default: null
                },
                {
                    name: 'enablePing',
                    description: 'Enable ICMP ping for host discovery',
                    type: 'boolean',
                    default: false
                },
                {
                    name: 'osDetection',
                    description: 'Enable OS fingerprinting',
                    type: 'boolean',
                    default: false
                }
            ],
            commonPorts: this.commonPorts.length,
            servicePatterns: Object.keys(this.servicePatterns).length
        };
    }
}

module.exports = NetworkScannerExploit;
