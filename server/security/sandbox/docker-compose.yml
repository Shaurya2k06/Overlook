version: "3.8"

services:
  # Security Testing Sandbox
  security-sandbox:
    build: .
    container_name: overlook-security-sandbox
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=sandbox
      - SANDBOX_PORT=3002
      - MAIN_APP_URL=http://localhost:3001
      - POSTGRES_URL=postgresql://sandbox_user:sandbox_pass@postgres:5432/sandbox_db
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=debug
      - ALLOWED_DOMAINS=localhost,127.0.0.1,webgoat,dvwa-test-app,vulnerable-test-app
    volumes:
      - ./test-results:/app/test-results
      - ./logs:/app/logs
    networks:
      - security-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # WebGoat - Vulnerable Test Application
  webgoat:
    image: webgoat/webgoat:latest
    container_name: webgoat-test-app
    ports:
      - "8080:8080"
    environment:
      - WEBGOAT_HOST=0.0.0.0
      - WEBGOAT_PORT=8080
    networks:
      - security-network
    restart: unless-stopped

  # DVWA (Damn Vulnerable Web Application)
  dvwa:
    image: vulnerables/web-dvwa:latest
    container_name: dvwa-test-app
    ports:
      - "8081:80"
    environment:
      - MYSQL_ROOT_PASSWORD=dvwa
      - MYSQL_DATABASE=dvwa
      - MYSQL_USER=dvwa
      - MYSQL_PASSWORD=p@ssw0rd
    networks:
      - security-network
    restart: unless-stopped

  # Database for test data and results
  postgres:
    image: postgres:15-alpine
    container_name: security-postgres
    environment:
      - POSTGRES_DB=sandbox_db
      - POSTGRES_USER=sandbox_user
      - POSTGRES_PASSWORD=sandbox_pass
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - security-network
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: security-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - security-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Simple file server for test files
  file-server:
    image: nginx:alpine
    container_name: test-file-server
    ports:
      - "8082:80"
    volumes:
      - ./test-files:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - security-network
    restart: unless-stopped

networks:
  security-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
