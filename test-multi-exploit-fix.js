const axios = require('axios');

const API_BASE = 'http://localhost:3003/api/security';

async function testMultiExploitFix() {
    console.log('🧪 Testing Multi-Exploit Results Fix');
    console.log('='.repeat(50));

    try {
        // Wait for server to be ready
        console.log('🔄 Checking server status...');
        await new Promise(resolve => setTimeout(resolve, 2000));

        // Clear any existing results
        console.log('🗑️ Clearing previous results...');
        try {
            await axios.post(`${API_BASE}/clear-results`);
            console.log('✅ Previous results cleared');
        } catch (e) {
            console.log('⚠️ Clear results failed (may not exist)');
        }

        // Run multi-exploit scan
        console.log('\n🎯 Running multi-exploit scan...');
        const exploits = ['csrf', 'webVulnScanner', 'xss', 'sqlInjection', 'bufferOverflow'];

        const scanResponse = await axios.post(`${API_BASE}/scan-files`, {
            selectedExploits: exploits
        });

        if (!scanResponse.data.success) {
            throw new Error(`Scan failed: ${scanResponse.data.error}`);
        }

        console.log('✅ Multi-exploit scan completed');
        console.log(`📊 Scanned with ${scanResponse.data.data.results.length} exploits`);

        // Check results
        console.log('\n📋 Checking scan results...');
        await new Promise(resolve => setTimeout(resolve, 1000));

        const resultsResponse = await axios.get(`${API_BASE}/results`);
        const results = resultsResponse.data.data.results;

        console.log(`📈 Total result entries: ${results.length}`);

        // Analyze results by exploit type
        const exploitResults = {};
        results.forEach(result => {
            if (!exploitResults[result.exploitName]) {
                exploitResults[result.exploitName] = [];
            }
            exploitResults[result.exploitName].push(result);
        });

        console.log('\n🔍 Results by exploit type:');
        exploits.forEach(exploit => {
            const count = exploitResults[exploit] ? exploitResults[exploit].length : 0;
            const vulnCount = exploitResults[exploit] ?
                exploitResults[exploit].reduce((sum, r) => sum + (r.vulnerabilities?.length || 0), 0) : 0;

            console.log(`   ${exploit}: ${count} result(s), ${vulnCount} vulnerabilities`);
        });

        // Check if all exploits have results
        const missingExploits = exploits.filter(exploit => !exploitResults[exploit]);
        const presentExploits = exploits.filter(exploit => exploitResults[exploit]);

        console.log('\n📊 Analysis:');
        console.log(`✅ Exploits with results: ${presentExploits.length}/${exploits.length}`);

        if (missingExploits.length > 0) {
            console.log(`❌ Missing exploit results: ${missingExploits.join(', ')}`);
            console.log('💡 This indicates the auto-clear fix may not be working');
        } else {
            console.log('🎉 All exploits preserved their results!');
            console.log('✅ Auto-clear fix is working correctly');
        }

        // Show detailed vulnerability breakdown
        console.log('\n🛡️ Vulnerability Summary:');
        Object.entries(exploitResults).forEach(([exploit, results]) => {
            results.forEach(result => {
                const vulnCount = result.vulnerabilities?.length || 0;
                const status = vulnCount > 0 ? '🔴 FOUND' : '🟢 CLEAN';
                console.log(`   ${exploit}: ${status} (${vulnCount} vulnerabilities)`);

                if (vulnCount > 0) {
                    result.vulnerabilities.slice(0, 2).forEach(vuln => {
                        console.log(`      - ${vuln.type} (${vuln.severity}) in ${vuln.location}`);
                    });
                }
            });
        });

        // Test single exploit scan (should still clear previous)
        console.log('\n🔬 Testing single exploit scan (should clear previous)...');
        const singleScanResponse = await axios.post(`${API_BASE}/scan-files`, {
            selectedExploits: ['networkScanner']
        });

        await new Promise(resolve => setTimeout(resolve, 1000));
        const afterSingleResults = await axios.get(`${API_BASE}/results`);
        const singleResults = afterSingleResults.data.data.results;

        console.log(`📊 Results after single scan: ${singleResults.length}`);
        if (singleResults.length === 1 && singleResults[0].exploitName === 'networkScanner') {
            console.log('✅ Single exploit scan correctly cleared previous results');
        } else {
            console.log('⚠️ Single exploit scan behavior may need verification');
        }

        console.log('\n🎯 TEST SUMMARY:');
        console.log('='.repeat(30));

        if (presentExploits.length === exploits.length) {
            console.log('✅ PASSED: Multi-exploit results are preserved');
            console.log('✅ Fix is working correctly');
            console.log('🎉 Users should now see results from all exploits');
        } else {
            console.log('❌ FAILED: Some exploit results are missing');
            console.log('🔧 Further debugging needed');
        }

    } catch (error) {
        console.error('\n❌ Test failed:', error.message);
        if (error.response) {
            console.error('Response:', error.response.data);
        }
        console.log('\n🔧 Troubleshooting:');
        console.log('1. Ensure server is running on port 3003');
        console.log('2. Check that files are uploaded for scanning');
        console.log('3. Verify API endpoints are accessible');
        process.exit(1);
    }
}

// Error handling
process.on('unhandledRejection', (reason) => {
    console.error('\n💥 Unhandled promise rejection:', reason);
    process.exit(1);
});

// Run the test
console.log('Starting multi-exploit fix test...\n');
testMultiExploitFix().then(() => {
    console.log('\n🏁 Test completed!');
    process.exit(0);
});
